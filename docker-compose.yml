version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hotel-postgres
    environment:
      POSTGRES_DB: hotel_reservation
      POSTGRES_USER: hotel_user
      POSTGRES_PASSWORD: hotel_password
      POSTGRES_MULTIPLE_DATABASES: hotel_reservation,hotel_test
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - hotel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hotel_user -d hotel_reservation"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hotel-redis
    command: redis-server --appendonly yes --requirepass hotel_redis_pass
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - hotel-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "hotel_redis_pass", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: hotel-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: hotel_user
      RABBITMQ_DEFAULT_PASS: hotel_pass
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - hotel-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Meilisearch
  meilisearch:
    image: getmeili/meilisearch:v1.6
    container_name: hotel-meilisearch
    environment:
      MEILI_ENV: development
      MEILI_NO_ANALYTICS: true
      MEILI_MASTER_KEY: masterKey123456789
      MEILI_HTTP_ADDR: 0.0.0.0:7700
    volumes:
      - meilisearch_data:/meili_data
    ports:
      - "7700:7700"
    networks:
      - hotel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # User Service
  user-service:
    build: 
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: hotel-user-service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/hotel_reservation
      SPRING_DATASOURCE_USERNAME: hotel_user
      SPRING_DATASOURCE_PASSWORD: hotel_password
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: hotel_redis_pass
      JWT_SECRET: ${JWT_SECRET:-myVerySecureSecretKey123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz}
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA: user_svc
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hotel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Hotel Service
  hotel-service:
    build: 
      context: ./services/hotel-service
      dockerfile: Dockerfile
    container_name: hotel-hotel-service
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/hotel_reservation
      SPRING_DATASOURCE_USERNAME: hotel_user
      SPRING_DATASOURCE_PASSWORD: hotel_password
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: hotel_redis_pass
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA: hotel_svc
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hotel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Booking Service
  booking-service:
    build: 
      context: ./services/booking-service
      dockerfile: Dockerfile
    container_name: hotel-booking-service
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/hotel_reservation
      SPRING_DATASOURCE_USERNAME: hotel_user
      SPRING_DATASOURCE_PASSWORD: hotel_password
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: hotel_redis_pass
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: hotel_user
      SPRING_RABBITMQ_PASSWORD: hotel_pass
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA: booking_svc
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - hotel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Search Service
  search-service:
    build: 
      context: ./services/search-service
      dockerfile: Dockerfile
    container_name: hotel-search-service
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      MEILISEARCH_HOST: http://meilisearch:7700
      MEILISEARCH_API_KEY: masterKey123456789
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: hotel_user
      SPRING_RABBITMQ_PASSWORD: hotel_pass
    depends_on:
      meilisearch:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - hotel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Notification Service
  notification-service:
    build: 
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: hotel-notification-service
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: hotel_user
      SPRING_RABBITMQ_PASSWORD: hotel_pass
      SPRING_MAIL_HOST: ${MAIL_HOST:-smtp.gmail.com}
      SPRING_MAIL_PORT: ${MAIL_PORT:-587}
      SPRING_MAIL_USERNAME: ${MAIL_USERNAME:-your-email@gmail.com}
      SPRING_MAIL_PASSWORD: ${MAIL_PASSWORD:-your-app-password}
      SPRING_MAIL_FROM: ${MAIL_FROM:-noreply@hotel.com}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - hotel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # API Gateway
  api-gateway:
    build: 
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: hotel-api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: hotel_redis_pass
      JWT_SECRET: ${JWT_SECRET:-myVerySecureSecretKey123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:3001,http://frontend:3000}
      USER_SERVICE_URL: http://user-service:8081
      HOTEL_SERVICE_URL: http://hotel-service:8082
      BOOKING_SERVICE_URL: http://booking-service:8083
      SEARCH_SERVICE_URL: http://search-service:8084
      NOTIFICATION_SERVICE_URL: http://notification-service:8085
    depends_on:
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
      hotel-service:
        condition: service_healthy
      booking-service:
        condition: service_healthy
      search-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    networks:
      - hotel-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Monitoring & Management
  prometheus:
    image: prom/prometheus:latest
    container_name: hotel-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - hotel-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: hotel-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - hotel-network
    restart: unless-stopped

networks:
  hotel-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  meilisearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
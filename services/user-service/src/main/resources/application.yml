server:
  port: 8081

spring:
  application:
    name: user-service
    
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/hotel_reservation}
    username: ${DB_USERNAME:hotel_user}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: false
    
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        
jwt:
  secret: ${JWT_SECRET}
  expiration: 1800000 # 30 minutes

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized

logging:
  level:
    com.hotel.user: INFO
    org.springframework.security: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# CORS Configuration - Security restricted
app:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: Content-Type,Authorization,X-User-Id,X-Internal-Service,X-Internal-Token
    allow-credentials: true
    max-age: 3600
  
  # Internal Service Authentication - Secure token-based
  internal:
    service-secret: ${INTERNAL_SERVICE_SECRET:secure-shared-secret-change-in-production}
    allowed-services: notification-service,booking-service,hotel-service
    token-header: X-Internal-Token
    service-header: X-Internal-Service